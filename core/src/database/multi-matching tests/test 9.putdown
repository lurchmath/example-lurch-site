---
testing:
  type: possible sufficient instantiations
---

// Metavariables used in the formula below:
(metavariables A B)

// The formula to be instantiated:
{
    :A
    :B
    (^ A B)
}
// Note that the above formula will become the following sequence of patterns:
// [ A, B, (^ A B) ]

// The sequent we will attempt to make true:
{
    :X
    :(-> Y Z)
    :Y
    (^ Y X)
}
// Note that the above formula will become the following sequence of patterns:
// [ X, (-> Y Z), Y, (^ Y X) ]

// The options to use when searching:
(options none) // defaults: not direct, not intuitionistic

// List all solutions expected:
// (Note that each one comes with a list of indices, followed by a metavariable
// assignment.  Negative indices indicate that the pattern in question was
// optional and was not matched to any expression.)
(solutions
    // 1 way to instantiate none of the formula's outermost expressions
    (-1 -1 -1)  empty_function
    // 1 way to instantiate just the third one
    (-1 -1  3)  (A Y   B X)
    // 4 ways to instantiate just the second one
    (-1  0 -1)  (B X)
    (-1  1 -1)  (B (-> Y Z))
    (-1  2 -1)  (B Y)
    (-1  3 -1)  (B (^ Y X))
    // 1 way to instantiate just the second and third ones
    (-1  0  3)  (A Y   B X)
    // 4 ways to instantiate just the first one
    ( 0 -1 -1)  (A X)
    ( 1 -1 -1)  (A (-> Y Z))
    ( 2 -1 -1)  (A Y)
    ( 3 -1 -1)  (A (^ Y X))
    // 1 way to instantiate just the first and third ones
    ( 2 -1  3)  (A Y   B X)
    // 16 ways to instantiate just the first and second ones
    ( 0  0 -1)  (A X   B X)
    ( 0  1 -1)  (A X   B (-> Y Z))
    ( 0  2 -1)  (A X   B Y)
    ( 0  3 -1)  (A X   B (^ Y X))
    ( 1  0 -1)  (A (-> Y Z)   B X)
    ( 1  1 -1)  (A (-> Y Z)   B (-> Y Z))
    ( 1  2 -1)  (A (-> Y Z)   B Y)
    ( 1  3 -1)  (A (-> Y Z)   B (^ Y X))
    ( 2  0 -1)  (A Y   B X)
    ( 2  1 -1)  (A Y   B (-> Y Z))
    ( 2  2 -1)  (A Y   B Y)
    ( 2  3 -1)  (A Y   B (^ Y X))
    ( 3  0 -1)  (A (^ Y X)   B X)
    ( 3  1 -1)  (A (^ Y X)   B (-> Y Z))
    ( 3  2 -1)  (A (^ Y X)   B Y)
    ( 3  3 -1)  (A (^ Y X)   B (^ Y X))
    // 1 way to instantiate all 3
    ( 2  0  3)  (A Y   B X)
)
